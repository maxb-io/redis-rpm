name: Build and Upload RPM Packages

on:
  push:
    branches:
      - release/**
      - rc/8.0
  workflow_dispatch:


jobs:
  build-rpms:
    name: Build RPM Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - {name: 'rhel8', image: 'redhat/ubi8'}
       #   - {name: 'rhel9', image: 'redhat/ubi9'}
       #   - {name: 'amazonlinux2', image: 'amazonlinux:2'}
    container:
      image: ${{ matrix.platform.image }}

    steps:
    - name: Debug Selected Docker Image
      run: echo "Selected Docker Image:" ${{ matrix.platform.image }}

    - name: Confirm Docker Environment
      run: cat /etc/os-release

    - uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        if [ "${{ matrix.platform.name }}" == "rhel9" ]; then
          dnf install -y --quiet cargo curl git tar gzip make gcc gcc-toolset-13-gcc gcc-toolset-13-gcc-c++ cmake python3 python3-pip python3-devel unzip rsync clang automake libtool openssl-devel jq --allowerasing
          
          cp etc/centos-stream-9.repo /etc/yum.repos.d/centos-stream-9.repo
          dnf clean all
          dnf makecache
          dnf install -y boost automake --enablerepo=centos-stream-baseos --enablerepo=centos-stream-appstream
         elif [ "${{ matrix.platform.name }}" == "rhel8" ]; then
          rm /etc/yum.repos.d/* -f
          cp etc/almalinux-8.repo /etc/yum.repos.d/almalinux-8.repo
          dnf clean all
          dnf makecache
          dnf update -y
          dnf groupinstall "Development Tools" -yqq
          dnf install python3.11-pip -y
          dnf config-manager --set-enabled crb
          dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
          
          dnf install -y --quiet boost automake curl git tar gzip make gcc gcc-toolset-13-gcc gcc-toolset-13-gcc-c++ \
          gcc-toolset-13-libatomic-devel gcc-toolset-13-libatomic-devel python3 python3-pip python3-devel \
          unzip rsync clang automake  libtool openssl openssl-devel bzip2-devel libffi-devel zlib-devel xz which \
          python3.11-devel jq wget --allowerasing
          pip3 install dataclasses
          bash install/install_cmake.sh
          
          cp /opt/rh/gcc-toolset-13/enable /etc/profile.d/gcc-toolset-13.sh
          source /etc/profile.d/gcc-toolset-13.sh 
          echo "Show gcc version"
          gcc --version
          whcih gcc
        else
          yum install -y curl git tar gzip make gcc
        fi

    - name: Determine version
      run: |
          #echo "VERSION=$(head -1 debian/changelog | sed 's/^.*([0-9]*:*\([0-9.]*\)-.*$/\1/')"
          #VERSION="8.0-m02"   
          VERSION="8-mod"   
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
    - name: Download Redis source
      run: |

        curl --silent -L "https://github.com/maxb-io/redis/archive/${VERSION}.tar.gz" -o redis_${VERSION}.orig.tar.gz
        #curl --silent -L "https://github.com/redis/redis/archive/${VERSION}.tar.gz" -o redis_${VERSION}.orig.tar.gz
        mkdir -p source
        tar -xzf redis_${VERSION}.orig.tar.gz -C source --strip-components=1
#        REPO="your-org/project-aaa"
#        LATEST_RELEASE=$(curl -s https://api.github.com/repos/$REPO/releases/latest || { echo "Error fetching release info"; exit 1; })
#        TARBALL_URL=$(echo "$LATEST_RELEASE" | grep -oP '(?<="tarball_url": ")[^"]+')
#        [ -n "$TARBALL_URL" ] || { echo "Error: No tarball URL found"; exit 1; }
#
#        curl -L -o project-aaa.tar.gz "$TARBALL_URL"

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build Project
      run: |
        cd source
        BUILD_WITH_MODULES=yes make REDIS_CFLAGS='-Werror -DREDIS_TEST' BUILD_TLS=yes
        PREFIX=./build/usr make BUILD_TLS=yes install
        echo "list artifacrs"
        ls -lR ./build/
    - name: Install nfpm
      run: |
        go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest
    - name: Prepare nfpm configuration
      run: |
        VERSION="${{ github.ref_name }}"
        cat > nfpm.yaml << EOF
        name: "project-aaa"
        arch: "x86_64"
        platform: linux
        version: "1.2"
        section: "default"
        priority: "extra"
        maintainer: "Your Name <your.email@example.com>"
        description: "Project AAA RPM Package"
        homepage: "${{ github.server_url }}/${{ github.repository }}"
        
        contents:
          - src: ./build/usr/*
            dst: /usr/bin/
        
        rpm:
          summary: "Project AAA"
          group: "Application/System"
          compression: "gzip"           
        EOF
    - name: Build RPM Package
      run: |
        mkdir -p dist/${{ matrix.platform }}/$VERSION
        nfpm package --packager rpm --target dist/${{ matrix.platform }}/$VERSION/
    - name: Upload RPM Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-rpms
        path: dist/${{ matrix.platform }}/$VERSION/

    - name: Upload RPMs to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        BUCKET_NAME="temp-test-redis-rpm"
        REGION="us-east-2"
        VERSION="${{ github.ref_name }}"
        PLATFORM="${{ matrix.platform }}"
        s3cmd --access_key=${AWS_ACCESS_KEY_ID} \
              --secret_key=${AWS_SECRET_ACCESS_KEY} \
              put -P dist/$PLATFORM/$VERSION/*.rpm \
              s3://$BUCKET_NAME/rpms/$PLATFORM/$VERSION/
